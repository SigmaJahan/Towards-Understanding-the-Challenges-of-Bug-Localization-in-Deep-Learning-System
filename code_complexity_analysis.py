# -*- coding: utf-8 -*-
"""Code_Complexity_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f-KLHnwzr_pT1bTBk400Jf0d9bVrlUFb
"""

pip install radon

pip install nbformat

import os
import random
import radon.metrics as metrics
import radon.complexity as complexity
from radon.visitors import ComplexityVisitor

from google.colab import drive
drive.mount('/content/drive')

buggl_dir = '/content/drive/My Drive/buggl'
denchmark_dir = '/content/drive/MyDrive/denchmark'

sample_size = 385

def get_python_files(dir_path):
    python_files = []
    for root, dirs, files in os.walk(dir_path):
        for file in files:
            if file.endswith(".py"):
                python_files.append(os.path.join(root, file))
    return python_files

def calculate_metrics(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        code = file.read()

    loc = metrics.harvest_code_metrics(code)['loc']
    visitor = ComplexityVisitor.from_code(code)
    cc = visitor.complexity
    halstead = metrics.h_visit(code)
    maintainability = metrics.mi_visit(code)

    return loc, cc, halstead.total, maintainability

def calculate_average_metrics(files):
    loc_list = []
    cc_list = []
    halstead_list = []
    maintainability_list = []

    for file in files:
        try:
            loc, cc, halstead, maintainability = calculate_metrics(file)
            loc_list.append(loc)
            cc_list.append(cc)
            halstead_list.append(halstead)
            maintainability_list.append(maintainability)
        except Exception as e:
            print(f"Error {file}: {e}")

    avg_loc = sum(loc_list) / len(loc_list)
    avg_cc = sum(cc_list) / len(cc_list)
    avg_halstead = sum(halstead_list) / len(halstead_list)
    avg_maintainability = sum(maintainability_list) / len(maintainability_list)

    return avg_loc, avg_cc, avg_halstead, avg_maintainability

def main():
    buggl_files = get_python_files(buggl_dir)
    denchmark_files = get_python_files(denchmark_dir)
    buggl_sample = random.sample(buggl_files, sample_size)
    denchmark_sample = random.sample(denchmark_files, sample_size)
    buggl_avg_metrics = calculate_average_metrics(buggl_sample)
    print(f"BugGL - AVG LOC: {buggl_avg_metrics[0]:.2f}, AVG CC: {buggl_avg_metrics[1]:.2f}, AVG Halstead: {buggl_avg_metrics[2]:.2f}, AVG MI: {buggl_avg_metrics[3]:.2f}")
    denchmark_avg_metrics = calculate_average_metrics(denchmark_sample)
    print(f"Denchmark - AVG LOC: {denchmark_avg_metrics[0]:.2f}, AVG CC: {denchmark_avg_metrics[1]:.2f}, AVG Halstead: {denchmark_avg_metrics[2]:.2f}, AVG MI: {denchmark_avg_metrics[3]:.2f}")

if __name__ == "__main__":
    main()

