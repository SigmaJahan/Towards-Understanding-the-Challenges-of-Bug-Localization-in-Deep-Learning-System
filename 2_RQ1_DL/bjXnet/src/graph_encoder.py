# -*- coding: utf-8 -*-
"""graph_encoder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UcrdG_S7ztc960Bjj-nzdL8lyD5IATnT
"""

import dgl
import torch
import torch.nn as nn
from dgl.nn import GatedGraphConv

class GraphEncoder(nn.Module):
    def __init__(self, in_feats, hidden_feats, n_steps, n_etypes):
        super(GraphEncoder, self).__init__()
        self.ggnn = GatedGraphConv(in_feats, hidden_feats, n_steps, n_etypes)

    def forward(self, graph, features):
        out_feats = self.ggnn(graph, features)
        return out_feats

def load_cpg_data(cpg_path):
    graphs = []
    node_features = []
    edge_types = []
    return graphs, node_features, edge_types

class CPGDataset(Dataset):
    def __init__(self, graphs, node_features):
        self.graphs = graphs
        self.node_features = node_features

    def __len__(self):
        return len(self.graphs)

    def __getitem__(self, idx):
        return self.graphs[idx], self.node_features[idx]