# -*- coding: utf-8 -*-
"""datapreprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UcrdG_S7ztc960Bjj-nzdL8lyD5IATnT
"""

import os
import re
import torch
from torch.utils.data import Dataset
from sklearn.preprocessing import LabelEncoder
from gensim.models import KeyedVectors

class DataProcessor:
    def __init__(self, glove_path):
        self.glove_model = self.load_glove_model(glove_path)

    def load_glove_model(self, path):
        print(f"Loading GloVe model from {path}...")
        model = KeyedVectors.load_word2vec_format(path, binary=False)
        return model

    def preprocess_text(self, text):
        text = re.sub(r'[^\w\s]', '', text.lower())
        tokens = text.split()
        return tokens

    def text_to_vector(self, tokens):
        vector = [self.glove_model[word] for word in tokens if word in self.glove_model]
        if vector:
            return torch.mean(torch.tensor(vector), dim=0)
        return torch.zeros(300)

class BugDataset(Dataset):
    def __init__(self, bug_reports, source_files, labels, processor):
        self.bug_reports = bug_reports
        self.source_files = source_files
        self.labels = labels
        self.processor = processor

    def __len__(self):
        return len(self.bug_reports)

    def __getitem__(self, idx):
        bug_text = self.processor.preprocess_text(self.bug_reports[idx])
        source_text = self.processor.preprocess_text(self.source_files[idx])

        bug_vec = self.processor.text_to_vector(bug_text)
        source_vec = self.processor.text_to_vector(source_text)

        label = self.labels[idx]
        return bug_vec, source_vec, label